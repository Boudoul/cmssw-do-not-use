---
title: CMS Offline Software
layout: default
related:
 - { name: Home, link: index.html }
 - { name: Project, link: https://github.com/cms-sw/cmssw }
 - { name: Topic Collector, link: https://eulisse.web.cern.ch/eulisse/cgi-bin/git-collector/cmsgit}
 - { name: Feedback, link: https://github.com/cms-sw/cmssw/issues/new }
---
# FAQ

* auto-gen TOC:
{:toc}

## General questions

### Where can I learn about git, github in general?

- Generic git help can be found at <http://git-scm.com/book/>.
- github.com specific help can be found at <https://help.github.com>.

### How do I subscribe to github?

In order to develop CMSSW you will need a github account and to link it to your
CERN account. This is easily done by going to [CMS Topic
Collector][cms-topic-collector].

* In case you don't, simply click on the "Sign up for free" button 

  ![signup button](images/github-signup.png)

  and follow the instructions to create a new account.

  Go back to the [CMS Topic Collector][cms-topic-collector] page when done.

 * In case you already have an account you can simply use "the Sign in" dialog and
put your username and password.

  ![signin dialog](images/github-signin.png)

Once you are done, you'll be prompted to grant CMS Topic Collector the rights to
connect to your github account, simply click on "Authorize app".

![signup button](images/github-authorize.png)

Once you are done, you might want to execute the following commands to add easy
to remember names for some CMS specific things:

    git config --global remote.cmssw-main.url git@github.com:cms-sw/cmssw.git 
    git config --global remote.cmssw-main-ro.url git://github.com/cms-sw/cmssw.git
    git config --global core.sparsecheckout true

*NOTE:* Should we add this to the default CMS environment?

[cms-topic-collector]: https://eulisse.web.cern.ch/eulisse/cgi-bin/git-collector/cmsgit

## Working with CMSSW on github

### How do I checkout one or more packages?

If you are in a CMSSW area (remember to do `cmsenv`) you can simply use:
  
    git addpkg <package-name>

once you have developments you can checkout dependent packages by doing.

    git checkdeps

[Read more.](git-addpkg)

### How do I develop a new feature using git?

First of all you need to fork cmssw to your own personal repository. This
repository will be used to hold all your incomplete developments. 

**NOTE**: all this can be automated the first time people connect to a yet to be
  introduced "Topic Collector".

Once you have done that, add a shortcut to it.

    GITHUB_USER=<your github username>
    git config --global remote.cmssw-me.url git@github.com:$GITHUB_USER/cmssw.git 

In your working area checkout a few packages you want to modify via
`git-addpkg`. When you are ready to start developing create a new topic branch
to hold your developments, e.g.:

    git checkout -b for/CMSSW_6_2_X/my-topic-branch

Notice you'll be able to add more packages afterwards, so do not worry if you don't
have all of them right ahead.

Once you are happy with your changes, push them to your private repository on
github, e.g.:

    git push cmssw-me for/CMSSW_6_2_X/my-topic-branch

You can do the above multiple times, whenever you have updated your development.
Whenever you are happy, open a pull request to merge your topic branch into the
official repository.

This can be done by going to [CMS Topic Collector][cms-topic-collector] and by
clicking on the "Create new pull request for ...".

![Create pull request](images/create-pull-request.png) 

This will redirect you to the github equivalent of the "tagset publishing"  page in the old tag collector
("pull request creation" in git jargon):

![Publish pull request](images/publish-branch.png) 

there you can select your release queue (or "release branch") and your source branch.

### How do I check the status of my pull request(s).

Pull requests to the official CMSSW repository can be looked at in:

https://eulisse.web.cern.ch/eulisse/cgi-bin/git-collector/cmsgit/

here you'll find all the open requests and their approval status.

### CVS-speak to git speak

| CMS CVS                        | CMS GIT                                      |
| -                              | -                                            |
| tagset                         | topic branch                                 |
| publish a tagset               | create a pull request                        |
| Tag Collector                  | Topic Collector                              |
| `addpkg`                       | `git addpkg`                                 |
| `checkdeps`                    | `git checkdeps`                              |
| `cmstc tagset `<tagset-id> -a` | `git pull cmssw-main --track <topic-branch>` |

## Advanced usage

### How do I checkout the full CMSSW repository locally?

To checkout the full CMSSW repository locally you can do:

    git clone cmssw-main src

in your SCRAM work area.  Notice this will require a github account (see
[here]() for the relevant FAQ). Alternatively you can do:
    
    git clone cmssw-main-ro src

for read only access. If you want to checkout a given tag, you need to 
specify it via the `-b` flag, e.g.:

    git clone cmssw-main src -b CMSSW_6_1_0

See [here][git-clone-repo] for more detailed information on `git clone`
command.

[git-clone-repo]: http://git-scm.com/book/en/Git-Basics-Getting-a-Git-Repository#Cloning-an-Existing-Repository

### How do I browse / search the code?

The source code for the official CMSSW repository can be found in the main
github page for CMSSW: <https://github.com/cms-sw/cmssw>.

Branches and tags are available by clicking on the "branches" combo box in the
top left part of the page:

![branches-dialog](images/branches-dialog.png)

The source-code of the official CMSSW can be searched by using
<https://github.com/search?l=&q=repo%3Acms-sw%2Fcmssw&ref=advsearch&type=Code>.

If you prefer using the command line interface, you can do the same by using
`git grep` command inside `CMSSW/src` area:

    git grep <reg-expr>

e.g.:

    git grep Plugin.*

which will give you:

    Alignment/CSA06AlignmentAlgorithm/BuildFile:<use name=FWCore/PluginManager>
    Alignment/CommonAlignmentAlgorithm/BuildFile.xml:<use   name="FWCore/PluginManager"/>
    Alignment/CommonAlignmentAlgorithm/interface/AlignmentAlgorithmPluginFactory.h:#include "FWCore/PluginManager/interface/PluginFactory.h"
    Alignment/CommonAlignmentAlgorithm/interface/IntegratedCalibrationPluginFactory.h:#include "FWCore/PluginManager/interface/PluginFactory.h"
    Alignment/CommonAlignmentMonitor/BuildFile.xml:<use   name="FWCore/PluginManager"/>
    Alignment/CommonAlignmentMonitor/interface/AlignmentMonitorPluginFactory.h:#include "FWCore/PluginManager/interface/PluginFactory.h"
    Alignment/CommonAlignmentMonitor/plugins/AlignmentMonitorTemplate.cc:// #include "PluginManager/ModuleDef.h"
    Alignment/CommonAlignmentMonitor/plugins/AlignmentStats.cc:#include "FWCore/PluginManager/interface/ModuleDef.h"
    Alignment/CommonAlignmentMonitor/plugins/BuildFile.xml:<use   name="FWCore/PluginManager"/>
    ...

for more information about `git grep` click [here](http://git-scm.com/docs/git-grep).

*NOTES*: Clearly we need to find a way to shorten this url.

### How do I tell who is responsible for a given change?

Let's say you want to find out who is responsible for a given
change in `FWCore/Framework/BuildFile.xml`. If you are happy with using
the web based GUI you can simply browse to the given file ([click
here](https://github.com/cms-sw/cmssw/blob/master/FWCore/Framework/BuildFile.xml)
for this particular example). 

Then click on the "Blame" button (again [click
here](https://github.com/cms-sw/cmssw/blame/master/FWCore/Framework/BuildFile.xml)
for the particular example). 

![blame button](images/blame-button.png)

You can get the full information about a given change
(including which files changed in the same commit) by clicking on the 
specific commit-id (the hash in the left column, [for example
bd2fd326](https://github.com/cms-sw/cmssw/commit/bd2fd32657121cda0cc132a98b3b0d68773788b8)).

Alternatively if you prefer doing it from the command line, you can use the
`git blame` command to find out for each line which `commit-id` is responsible
for a given change.

    > git blame FWCore/Framework/BuildFile.xml

which returns:

    f4330d28 (wmtan 2010-02-18 23:10:32 +0000  1) <use   name="DataFormats/Common"/>
    f4330d28 (wmtan 2010-02-18 23:10:32 +0000  2) <use   name="DataFormats/Provenance"/>
    f4330d28 (wmtan 2010-02-18 23:10:32 +0000  3) <use   name="FWCore/Common"/>
    f4330d28 (wmtan 2010-02-18 23:10:32 +0000  4) <use   name="FWCore/MessageLogger"/>
    f4330d28 (wmtan 2010-02-18 23:10:32 +0000  5) <use   name="FWCore/ParameterSet"/>
    f4330d28 (wmtan 2010-02-18 23:10:32 +0000  6) <use   name="FWCore/PluginManager"/>
    f4330d28 (wmtan 2010-02-18 23:10:32 +0000  7) <use   name="FWCore/PythonParameterSet"/>
    f4330d28 (wmtan 2010-02-18 23:10:32 +0000  8) <use   name="FWCore/ServiceRegistry"/>
    f4330d28 (wmtan 2010-02-18 23:10:32 +0000  9) <use   name="FWCore/Utilities"/>
    f4330d28 (wmtan 2010-02-18 23:10:32 +0000 10) <use   name="FWCore/Version"/>
    f4330d28 (wmtan 2010-02-18 23:10:32 +0000 11) <use   name="boost"/>
    bd2fd326 (wmtan 2013-01-30 23:21:16 +0000 12) <use   name="rootcintex"/>
    f4330d28 (wmtan 2010-02-18 23:10:32 +0000 13) <use   name="rootcore"/>
    f4330d28 (wmtan 2010-02-18 23:10:32 +0000 14) <export>
    f4330d28 (wmtan 2010-02-18 23:10:32 +0000 15)   <lib   name="1"/>
    f4330d28 (wmtan 2010-02-18 23:10:32 +0000 16) </export>

Let's say we are interested in line 12, i.e. `<use   name="rootcintex"/>`. 
The first column gives us the `commit-id` (`bd2fd326` in this case). To find out everything
about that commit you can use the `git show` command:

    git show bd2fd326

which returns:

    commit bd2fd32657121cda0cc132a98b3b0d68773788b8
    Author: wmtan <>
    Date:   Wed Jan 30 23:21:16 2013 +0000
    
        With Reflex usage partially removed, EventProcessor needs CINT dictionaries
    
    diff --git a/FWCore/Framework/BuildFile.xml b/FWCore/Framework/BuildFile.xml
    index a5cae15..52e584d 100644
    --- a/FWCore/Framework/BuildFile.xml
    +++ b/FWCore/Framework/BuildFile.xml
    @@ -9,6 +9,7 @@
    <use   name="FWCore/Utilities"/>
    <use   name="FWCore/Version"/>
    <use   name="boost"/>
    +<use   name="rootcintex"/>
    <use   name="rootcore"/>
    <export>
    <lib   name="1"/>
    diff --git a/FWCore/Framework/src/EventProcessor.cc b/FWCore/Framework/src/EventProcessor.cc
    index a8fe6c3..fbe4bc3 100644
    --- a/FWCore/Framework/src/EventProcessor.cc
    +++ b/FWCore/Framework/src/EventProcessor.cc
    @@ -83,6 +83,9 @@
    #include <sched.h>
    #endif
    
    +//Needed for introspection
    +#include "Cintex/Cintex.h"
    +
    namespace edm {
    
    namespace event_processor {
    @@ -585,6 +588,8 @@ namespace edm {
                            serviceregistry::ServiceLegacy iLegacy) {
    
        //std::cerr << processDesc->dump() << std::endl;
    +
    +    ROOT::Cintex::Cintex::Enable();
    
        boost::shared_ptr<ParameterSet> parameterSet = processDesc->getProcessPSet();
        //std::cerr << parameterSet->dump() << std::endl;



## How do I ask a question?

If you have more questions about git and CMSSW on git, please use [this
form][new-faq-form].

[new-faq-form]: https://github.com/cms-sw/cmssw/issues/new
